/*******************************************************************************/
/*
Copyright (C) 2016 - 2020, Beijing 7invensun Technology Co.Ltd.All rights reserved.
Permission is hereby granted, free of charge, to any person or organization obtaining
a copy of the software and accompanying documentation covered by this license(the "Software")
to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare
derivative works of the Software, and to permit third - parties to whom the Software
is furnished to do so, all subject to the following :
The copyright notices in the Software and this entire statement, including the above
license grant, this restriction and the following disclaimer, must be included in all
copies of the Software, in whole or in part, and all derivative works of the Software,
unless such copies or derivative works are solely in the form of machine - executable
object code generated by a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, TITLE AND NON - INFRINGEMENT.IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

@author 7invensun
*/
#ifndef _INCLUDE_7INVENSUN_ASEEVR_TYPES_H_
#define _INCLUDE_7INVENSUN_ASEEVR_TYPES_H_

#ifdef _MSC_VER		
#   ifdef _7INVENSUN_ASEEVRCLIENT_DLL_EXPORTS
#       define _7INVENSUN_API __declspec(dllexport)	
#   else		
#       define _7INVENSUN_API __declspec(dllimport)	
#   endif//_7INVENSUN_ASEEVRCLIENT_DLL_EXPORTS 
#   ifndef _7INVENSUN_CALL
#       define _7INVENSUN_CALL __stdcall
#   endif//_7INVENSUN_CALL
#else
#   define _7INVENSUN_API
#   define _7INVENSUN_CALL
#endif//_MSC_VER

#ifndef uint8_t
typedef unsigned char uint8_t;
#endif

#ifndef int16_t
typedef short int16_t;
#endif

#ifndef int32_t
typedef int int32_t;
#endif

#ifndef uint32_t
typedef unsigned int uint32_t;
#endif

#ifndef int64_t
typedef long long int64_t;
#endif

#ifndef uint64_t
typedef unsigned long long uint64_t;
#endif

/**
* @enum aSeeVRCallbackType
* Enumerate all the callback function types used in the API.
*/
typedef enum ASEEVR_CALLBACK_TYPE {
	state,           /*!<State callback function. */
	eye_data,        /*!<Eye data callback function. */  
	eye_image,       /*!<Eye image callback function. */
    coefficient      /*!<Calibration coefficient callback function. */
}aSeeVRCallbackType;

/**
* @enum aSeeVRClientMode
* Enumerate all the client connection patterns
* @note Paimax users can ignore it.
*/
typedef enum ASEEVR_CLIENT_MODE {
	control = 1,   /*!<Master mode: only one client can connect to the server in master mode at the same time, which can control the device start or stop. */
	monitor        /*!<Monitor mode: unable to control the device start or stop, after connecting to the server, can receive the data sent by the server. */
}aSeeVRClientMode;

/**
* @enum aSeeVRStateCode
* Enumerate the possible values of code members in the aSeeVRState structure, mark the type of the API.
*/
typedef enum ASEEVR_STATE_CODE {	
	api_start = 1001,              /*!<Mark the aSeeVR_start function. */
	api_stop = 1002,               /*!<Mark the aSeeVR_stop function.*/
	api_calib_setup = 1003,        /*!<n/a */
	api_calib_start_point = 1004,  /*!<n/a */
	api_calib_cancel_point = 1005, /*!<n/a */
	api_calib_complete = 1006,     /*!<n/a */
    api_get_cofficient = 1009,     /*!<Mark the aSeeVR_get_coefficient function.*/
	api_iris_start_detect = 1012,  /*!<Mark the aSeeVR_iris_start_detect function.*/
	api_iris_stop_detect = 1013,   /*!<Mark the aSeeVR_iris_stop_detect function.*/
	api_iris_start_enroll = 1014,  /*!<Mark the aSeeVR_iris_start_enroll function.*/
	api_iris_stop_enroll = 1015,   /*!<Mark the aSeeVR_iris_stop_enroll function.*/
	api_iris_load_feature = 1016,  /*!<Mark the aSeeVR_iris_load_feature function.*/
	api_iris_clear_feature = 1017, /*!<Mark the aSeeVR_iris_clear_feature function.*/
	api_iris_start_identify = 1018,/*!<Mark the aSeeVR_iris_start_identify function.*/
	api_iris_stop_identify = 1019, /*!<Mark the aSeeVR_iris_stop_identify function.*/
    api_calib_compute = 1020       /*!<n/a */
}aSeeVRStateCode;

/**
* @union aSeeVRPoint2D
* Two dimensional coordinate point.
*/
typedef union ASEEVR_POINT_2D
{
	struct {
		float x, y;
	};
	float seq[2];
}aSeeVRPoint2D;

/**
* @union aSeeVRPoint2D
* Three dimensional coordinate point.
*/
typedef union ASEEVR_POINT_3D {
	struct {
		float x, y, z;
	};
	float seq[3];
}aSeeVRPoint3D;

/**
* @struct aSeeVRImage
* Eye data structure.
* @note Paimax users can ignore it.
*/
typedef struct ASEEVR_EYE_IMAGE {
    int32_t flag;      /*!<Mark left eye or right eye(1 - left eye, 2 - right eye). */	
	int32_t width;     /*!<Width of eye image (in pixels). */	
	int32_t height;    /*!<Hight of eye image (in pixels). */	
	uint8_t *data;     /*!<Eye image data area (format: grayscale). */	
	int64_t timestamp; /*!<Eye image timestamp. */	
}aSeeVRImage;

/**
* @struct aSeeVRState
* State information structure.
*/
typedef struct ASEEVR_STATE {
	int32_t code;  /*!<State type code (refer to enumerated type: aSeeVRStateCode). */	
	int32_t error; /*!<Error code (0 indicates successful or normal, others indicate error). */	
}aSeeVRState;

/**
* @struct aSeeVRInitParam
* Data initialization structure, used for aSeeVR_connect_server function.
*/
typedef struct ASEEVR_INIT_PARAM {
	aSeeVRClientMode mode; /*!<Connection mode, ordinary users should use the master mode ( refer to enumeration type: aSeeVRClientMode). */	
	int16_t ports[10];     /*!<The port number of the server, consistent with the port number used by the server. */
}aSeeVRInitParam;

/**
* @struct aSeeVRLanuchParam
* lanuch parameter structure, used for aSeeVR_start function?
* @note Paimax users can ignore it.
*/
typedef struct ASEEVR_LAUNCH_PARAM {
	int32_t enable_iris; /*!<Iris recognition switch (1 - enable, 0 - disabled).*/	
    int32_t eye; /*!<mode of eye tracking (1 - only left eye, 2 - only right eye, 3 - binoculus).*/
}aSeeVRLanuchParam;

/**
* @struct aSeeVRCoefficient
* Calibration coefficient structure.
*/
typedef struct ASEEVR_COEFFICIENT {
	uint8_t buf[2048]; /*!<Calibration coefficient*/	
}aSeeVRCoefficient;

/**
* @struct aSeeVREyeData
* An eye data structure, whose internal data members can be obtained with a function defined in the aSeeVRUtility.h file.Data member mark refer to the definition of enumeration type: aSeeVREyeDataItemType¡£
*/
typedef struct ASEEVR_EYE_DATA aSeeVREyeData;

/**
* @enum aSeeVREye
* Enumerate eye types, left eye or right eye.
*/
typedef enum ASEEVR_EYE {
	undefine_eye = -1, /*!<Undefined, which means do not distinguish left eye or right eye. */	
	left_eye,          /*!<Left eye. */
	right_eye          /*!<Right eye. */
}aSeeVREye;

/**
* @enum aSeeVREyeDataItemType
* Enumeration of data members in the aSeeVREyeData structure.
*/
typedef enum ASEEVR_EYE_DATA_ITEM_TYPE {
	timestamp,       /*!<Timestamp, type: int64 */
    recommend,       /*!<Recommended eye (1- left eye, 2- right eye), type: int32 */
	gaze,            /*!<Gaze point coordinates, type: aSeeVRPoint2D */
    gaze_raw,        /*!<Gaze point coordinates before smoothing, type: aSeeVRPoint2D */
	gaze_smooth,     /*!<Gaze point coordinates after smoothing, type: aSeeVRPoint2D */
    gaze_origin,     /*!<Pupil center coordinates, type: aSeeVRPoint3D */
    gaze_direction,   /*!<Gaze vector, type: aSeeVRPoint3D */
    gaze_reliability,/*!<Gaze point reliability, type: float */

	pupil_center,      /*!<Pupil center, type: aSeeVRPoint2D£¬Normalization (0~1) */
	pupil_distance,    /*!<Distance between pupil and camera lens, unit: mm, type: float */
    pupil_diameter,    /*!<Pupil diameter, pupil longer axis, type: float£¬Normalization (0~1) */
	pupil_diameter_mm, /*!<Pupil diameter, pupil longer axis, unit: mm, type:float */
    pupil_minoraxis,   /*!<Pupil shorter axis, type: float£¬Normalization (0~1) */
	pupil_minoraxis_mm,/*!<Pupil shorter axis, unit: mm, type: float */

	blink,       /*!<Mark blink information£¬type: int32 */
	openness,    /*!<Mark eye opening degrees£¬type: float */
    upper_eyelid,/*!<Mark upper eyelid data, type: float */
    lower_eyelid,/*!<Mark lower eyelid data, type: float */

}aSeeVREyeDataItemType;

/**
* @enum aSeeVRReturnCode
* Enumeration API return values.
*/
typedef enum ASEEVR_RETURN_CODE {
	bind_local_port_failed = -5, /*!<Failed to bind local port, handling method: modify the port number on the server. */	
	permission_denied,           /*!<permission denied, handling method: to obtain authorization. */	
	invalid_value,               /*!<Invalid value. */
	invalid_parameter,           /*!<Invalid parameter, handling method: check the validity of the parameters. */	
	failed,                      /*!<Failed, handling method: view the log. */	
	success                      /*!<Successful*/
}aSeeVRReturnCode;

#endif//_INCLUDE_7INVENSUN_ASEEVR_TYPES_H_